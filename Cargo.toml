[workspace]
members = [
    "crates/rez-core-common",
    "crates/rez-core-version",
    "crates/rez-core-solver",
    "crates/rez-core-repository",
    "crates/rez-core-python",
]
resolver = "2"

[workspace.package]
version = "0.1.0"
edition = "2021"
authors = ["LongHao <hal.long@outlook.com>"]
license = "Apache-2.0"
repository = "https://github.com/loonghao/rez-core"
keywords = ["rez", "package-manager", "dependency-resolution", "version-management"]
categories = ["development-tools"]

[workspace.dependencies]
# External dependencies
pyo3 = { version = "0.25", features = ["extension-module", "abi3-py38"] }
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
rayon = "1.7"
lru = "0.14.0"
tokio = { version = "1.0", features = ["full"] }
regex = "1.10"
thiserror = "2.0"
rand = "0.8"

# Dev dependencies
criterion = { version = "0.6", features = ["html_reports"] }
proptest = "1.0"
rstest = "0.25"
tempfile = "3.0"
assert_matches = "1.5"
pretty_assertions = "1.4"
serial_test = "3.0"

[package]
name = "rez-core"
version.workspace = true
edition.workspace = true
authors.workspace = true
description = "High-performance core components for Rez package manager (meta-package)"
license.workspace = true
repository.workspace = true
keywords.workspace = true
categories.workspace = true

[lib]
name = "rez_core"
crate-type = ["cdylib"]

[dependencies]
# Workspace crates
rez-core-common = { path = "crates/rez-core-common" }
rez-core-version = { path = "crates/rez-core-version" }
rez-core-solver = { path = "crates/rez-core-solver" }
rez-core-repository = { path = "crates/rez-core-repository" }
rez-core-python = { path = "crates/rez-core-python" }

# Python bindings
pyo3.workspace = true

[dev-dependencies]
criterion.workspace = true
proptest.workspace = true
rstest.workspace = true
tempfile.workspace = true
assert_matches.workspace = true
pretty_assertions.workspace = true
serial_test.workspace = true



[[bench]]
name = "version_benchmark"
harness = false

[build-dependencies]
pyo3-build-config = "0.25"

[features]
default = []
# flamegraph = ["pprof"]

# Linting configuration
[lints.rust]
# Allow unused imports for Python bindings that may not be used in all builds
unused_imports = "allow"
# Allow dead code for experimental features
dead_code = "allow"

[lints.clippy]
# Allow some clippy lints that are too strict for development
too_many_arguments = "allow"
module_inception = "allow"
# Focus on critical issues only
complexity = "warn"
correctness = "deny"
suspicious = "deny"
perf = "warn"

[profile.release]
opt-level = 3
lto = true
codegen-units = 1
panic = "abort"

[profile.profiling]
inherits = "release"
debug = true
lto = false
