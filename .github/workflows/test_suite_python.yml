name: Python Test Suite

on:
  push:
    branches: ["main", "ci-setup"]
    paths:
      - .github/workflows/*_python.yml
      - python/**
      - src/**
      - Cargo.lock
      - Cargo.toml
      - pyproject.toml
      - tests/python/**
  pull_request:
    paths:
      - .github/workflows/*_python.yml
      - python/**
      - src/**
      - Cargo.lock
      - Cargo.toml
      - pyproject.toml
      - tests/python/**

permissions:
  contents: read

env:
  # Improve reliability of network operations
  PYTHONUNBUFFERED: "1"
  PYTHONDONTWRITEBYTECODE: "1"
  # Reduce flakiness in CI
  UV_CACHE_DIR: ~/.cache/uv

jobs:
  test:
    name: Python test
    timeout-minutes: 60  # Add timeout to prevent hanging
    strategy:
      fail-fast: false  # Continue other jobs even if one fails
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest
        python-version:
          - version: "3.8"
            freethreaded: false
          - version: "3.9"
            freethreaded: false
          - version: "3.10"
            freethreaded: false
          - version: "3.11"
            freethreaded: false
          - version: "3.12"
            freethreaded: false
          - version: "3.13"
            freethreaded: false
          - version: "3.13"
            freethreaded: true
    runs-on: ${{ matrix.os }}
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: audit

      - name: Checkout repository with retry
        uses: ./.github/actions/retry-action
        with:
          command: |
            git config --global core.autocrlf false
            git config --global core.eol lf
          max_attempts: 3
          timeout_minutes: 5

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: Setup Rust toolchain with retry
        uses: ./.github/actions/retry-action
        with:
          command: |
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable
            echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          max_attempts: 3
          timeout_minutes: 10

      - uses: dtolnay/rust-toolchain@d0592fe69e35bc8f12e3dbaf9ad2694d976cb8e3 # stable

      - uses: Swatinem/rust-cache@9d47c6ad4b02e050fd481d890b2ea34778fd09d6 # v2.7.8
        with:
          shared-key: lang-python-${{ runner.os }}
          cache-on-failure: true

      - name: Run Cargo Clippy with retry
        uses: ./.github/actions/retry-action
        with:
          command: cargo clippy --all-targets --all-features -- -D warnings
          max_attempts: 2
          timeout_minutes: 15

      - name: Run Cargo Fmt with retry
        uses: ./.github/actions/retry-action
        with:
          command: cargo fmt --check
          max_attempts: 2
          timeout_minutes: 5

      - name: Setup Python ${{ matrix.python-version.version }} freethreaded=${{ matrix.python-version.freethreaded }}
        id: setup-python
        uses: actions/setup-python@8d9ed9ac5c53483de85588cdf95a591a75ab9f55 # v5.5.0
        with:
          python-version: ${{ matrix.python-version.version }}
          freethreaded: ${{ matrix.python-version.freethreaded }}

      - name: Install uv with retry
        uses: ./.github/actions/retry-action
        with:
          command: |
            if command -v uv >/dev/null 2>&1; then
              echo "uv already installed"
              uv --version
            else
              echo "Installing uv..."
              curl -LsSf https://astral.sh/uv/install.sh | sh
              echo "$HOME/.cargo/bin" >> $GITHUB_PATH
            fi
          max_attempts: 3
          timeout_minutes: 10

      - name: Setup uv (fallback)
        uses: astral-sh/setup-uv@v4
        if: failure()
        with:
          enable-cache: true

      - name: Install dependencies and run Python tests (Unix)
        if: runner.os != 'Windows'
        uses: ./.github/actions/retry-action
        with:
          command: |
            echo "Installing dependencies..."
            make install
            echo "Running Python linting..."
            make lint-python
            echo "Running Python tests..."
            make test-python
            echo "Generating test coverage..."
            make testcov
          max_attempts: 3
          timeout_minutes: 30
          continue_on_error: false

      - name: Install dependencies and run Python tests (Windows)
        if: runner.os == 'Windows'
        uses: ./.github/actions/retry-action
        with:
          command: |
            echo "Syncing dependencies..."
            uv sync --all-extras
            echo "Installing package in development mode..."
            uv pip install -e .
            echo "Building development version..."
            .\scripts\build.ps1 build-dev
            echo "Running Python linting..."
            .\scripts\build.ps1 lint-python
            echo "Running Python tests..."
            .\scripts\build.ps1 test-python
          max_attempts: 3
          timeout_minutes: 30
          continue_on_error: false
          shell: pwsh

      - name: Upload coverage to Codecov with retry
        uses: ./.github/actions/retry-action
        if: always() && (success() || failure())
        with:
          command: |
            if [ -f coverage.xml ]; then
              echo "Uploading coverage to Codecov..."
              curl -Os https://uploader.codecov.io/latest/linux/codecov
              chmod +x codecov
              ./codecov -f coverage.xml -F lang-python
            else
              echo "No coverage.xml file found, skipping upload"
            fi
          max_attempts: 5
          timeout_minutes: 10
          continue_on_error: true

      - name: Codecov fallback upload
        uses: codecov/codecov-action@18283e04ce6e62d37312384ff67231eb8fd56d24 # v5.4.3
        if: failure()
        continue-on-error: true
        with:
          files: coverage.xml
          flags: lang-python
          fail_ci_if_error: false
